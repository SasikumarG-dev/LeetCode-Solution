1678. Goal Parser Interpretation



You own a Goal Parser that can interpret a string command. The command consists of an alphabet of "G", "()" and/or "(al)" in some order. The Goal Parser will interpret "G" as the string "G", "()" as the string "o", and "(al)" as the string "al". The interpreted strings are then concatenated in the original order.

Given the string command, return the Goal Parser's interpretation of command.

 

Example 1:

Input: command = "G()(al)"
Output: "Goal"
Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is "Goal".
Example 2:

Input: command = "G()()()()(al)"
Output: "Gooooal"
Example 3:

Input: command = "(al)G(al)()()G"
Output: "alGalooG"
 

Constraints:

1 <= command.length <= 100
command consists of "G", "()", and/or "(al)" in some order.



SOLUTION IN JAVA:


class Solution {
    public String interpret(String command) {
        Stack<Character>stack=new Stack<>();
		StringBuilder sb=new StringBuilder();
		
		int i=0;
		while(i<command.length()) {
			char ch=command.charAt(i);
			if(ch=='G') {
				sb.append('G');
				i++;
			}
			else if(ch=='(' && command.charAt(i+1)==')') {
				sb.append('o');
				i+=2;
			}
			else {
				sb.append("al");
				i+=4;
			}
		}
        return sb.toString();
    }
}

SOLUTION USING STACK:


class Solution {
    public String interpret(String command) {
        Stack<Character>stack=new Stack<>();
		StringBuilder sb=new StringBuilder();
		for(char ch:command.toCharArray()) {
			if(ch=='G') {
				sb.append('G');
			}
			else if(ch==')') {
				if(stack.pop()=='(') {
					sb.append('o');
				}
				else {
					sb.append('a');
					sb.append('l');
				}
				
			}
			else {
				stack.push(ch);
			}
			
		}
        return sb.toString();
    }
}



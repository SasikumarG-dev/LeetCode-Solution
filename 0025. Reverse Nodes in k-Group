25. Reverse Nodes in k-Group


Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?


SOLUTION IN JAVA:


class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy=new ListNode(0,head);
        ListNode prev=dummy;
        ListNode curr=head;

        int len=length(head);

        for(int i=0;i<len/k;i++){
            for(int j=0;j<k-1;j++){
                ListNode next=curr.next;
                curr.next=next.next;
                next.next=prev.next;
                prev.next=next;

            }
            prev=curr;
            curr=curr.next;
        }
        return dummy.next;

    }
    public int length(ListNode head){
        int len=0;
        while(head!=null){
            len++;
            head=head.next;

        }
        return len;
    }
}

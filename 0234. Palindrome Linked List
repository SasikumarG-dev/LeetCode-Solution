234. Palindrome Linked List



Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?



SOLUTION IN JAVA:



class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;

        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        ListNode node1=reverse(slow);
        ListNode node2=head;
        

		
        while(node1!=null && node2!=null){
            if(node1.val!=node2.val){
                return false;
            }
            node1=node1.next;
            node2=node2.next;
        }
        return true;
    }

    public ListNode reverse(ListNode curr){
        ListNode prev=null;
        while(curr!=null){
            ListNode next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
}

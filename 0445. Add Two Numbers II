445. Add Two Numbers II



You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
 

Follow up: Could you solve it without reversing the input lists?



SOLUTION IN JAVA:



class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

      l1=reverse(l1);
			l2=reverse(l2);
			ListNode node=new ListNode(0);
			ListNode dummy=node;
			int carry=0;
			while(l1!=null || l2!=null || carry>0) {
				if(l1!=null) {
					carry+=l1.val;
					l1=l1.next;
				}
				if(l2!=null) {
					carry+=l2.val;
					l2=l2.next;
				}
				node.next=new ListNode(carry%10);
				carry=carry/10;
				node=node.next;
			
			}
  	      return reverse(dummy.next);
					
  	  }
   		public ListNode reverse(ListNode head) {
				ListNode curr=head;
				ListNode prev=null;
				ListNode next=null;
				while(curr!=null) {
					next=curr.next;
					curr.next=prev;
					prev=curr;
					curr=next;
				}
		
		return prev;
	}
}

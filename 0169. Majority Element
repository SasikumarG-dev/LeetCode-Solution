169. Majority Element


Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?



SOLUTION IN JAVA:

//SOLUTION 1

class Solution {
    public int majorityElement(int[] nums) {
        
        int count=0;
        int ans=0;

        for(int n:nums){
            if(count==0){
                ans=n;
            }

            if(ans==n){
                count++;
            }
            else{
                count--;
            }
        }

        return ans;

    }
}



//SOLUTION 2:


class Solution {
    public int majorityElement(int[] nums) {
   


         ans=0;int ct=0;

         for(int i=0;i<nums.length;i++){
             int temp=0;
             for(int j=i+1;j<nums.length;j++){
                 if(nums[i]==nums[j])
                     temp++;
             }
             if(temp>=ct){
                 ct=temp;
                 ans=nums[i];
             }
         }
         return ans;
    }
}
